{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 About \u00b6 leekslazylogger is an easy-to-use and lightweight Node.JS logger with file support, colours, and timestamps. Features \u00b6 Highly customisable Extensions for popular frameworks (including express.js and fastify) 8 default log types and ability to add custom types Standard/RGB/HEX/8Bit colours UK and US spellings Short colour codes for fast colour ( &cred text -> red text in red) Debug mode (ignores debug messages unless told not to) Custom timestamp and date format for file names Automatically cleans-up old logs (optional) Strips colour if it's not supported in the environment Cross-platform Getting started \u00b6 For installation and usage instructions/examples, see Getting Started Support \u00b6 If you can't find what you're looking for here, ask for help in #support on Discord . Donate \u00b6","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#about","text":"leekslazylogger is an easy-to-use and lightweight Node.JS logger with file support, colours, and timestamps.","title":"About"},{"location":"#features","text":"Highly customisable Extensions for popular frameworks (including express.js and fastify) 8 default log types and ability to add custom types Standard/RGB/HEX/8Bit colours UK and US spellings Short colour codes for fast colour ( &cred text -> red text in red) Debug mode (ignores debug messages unless told not to) Custom timestamp and date format for file names Automatically cleans-up old logs (optional) Strips colour if it's not supported in the environment Cross-platform","title":"Features"},{"location":"#getting-started","text":"For installation and usage instructions/examples, see Getting Started","title":"Getting started"},{"location":"#support","text":"If you can't find what you're looking for here, ask for help in #support on Discord .","title":"Support"},{"location":"#donate","text":"","title":"Donate"},{"location":"child-loggers/","text":"Child loggers \u00b6 Tip This is no longer necessary, you can now just create a new Logger() . In your main you should have required leekslazylogger and created a new Logger instance as shown on the Getting started page. Using a ChildLogger // main (eg. index.js) const Logger = require ( 'leekslazylogger' ); const log = new Logger ( options ); // another file (eg. utils.js) const { ChildLogger } = require ( 'leekslazylogger' ); const log = new ChildLogger (); log . info ( 'Hello' );","title":"Child loggers"},{"location":"child-loggers/#child-loggers","text":"Tip This is no longer necessary, you can now just create a new Logger() . In your main you should have required leekslazylogger and created a new Logger instance as shown on the Getting started page. Using a ChildLogger // main (eg. index.js) const Logger = require ( 'leekslazylogger' ); const log = new Logger ( options ); // another file (eg. utils.js) const { ChildLogger } = require ( 'leekslazylogger' ); const log = new ChildLogger (); log . info ( 'Hello' );","title":"Child loggers"},{"location":"colours/","text":"Colours \u00b6 To use colours (other than &codes) inline, you must import leeks.js (which you have already installed as it is one of the two dependencies). I recommend using &codes if you want to use inline colours, Example Require leeks.js to use inline colours other than &codes: const leeks = require ( 'leeks.js' ); BUT I recommend using &codes instead if you want to use inline colours. Using overrides: log . info ( text , [ foregroundColour ]); log . info ( text , [ foregroundColour , backgroundColour ]); log . info ( text , [ backgroundColour ]); where foregroundColour and backgroundColour are resolvable colours . Info If you give both a foreground and background colour, and the background colour given is the name or &code of a foreground colour, the background colour will be converted to an actual background colour. As RGB/HEX/8bit colours do not have specific foreground/background codes, if you wish to use an RGB/HEX/8bit colour for the background you must also give a foreground colour. Types of colours \u00b6 leeks.js / colour name \u00b6 A name of a colour (string or function). A full list of leeks.js colour names and style names can be found here . Override log . info ( 'some text' , [ 'blue' , 'black' ]); // or log . info ( 'some text' , [ 'blue' , 'bgBlack' ]); Inline log . info ( `this part is normal info colour ${ leeks . colours . red ( 'but this part is red' ) } , although this is also red :(` ); // better to use &codes for inline RGB \u00b6 A string of numbers separated by commas (with or without spaces). See leeks.js docs for inline usage. log . info ( 'some text' , [ '123, 123, 123' , '321, 321, 321' ]); HEX \u00b6 A string with a HEX code ( with hashtag). See leeks.js docs for inline usage. log . info ( 'some text' , [ '#AABBCC' , '#123456' ]); 8bit \u00b6 A number. You will get an error if you try to put the number in a string. See leeks.js docs for inline usage. log . info ( 'some text' , [ 16 , 1 ]); &code \u00b6 A string containing an &fg or &!bg short code for a leeks.js colour. All short codes are listed below . Don't put a space between codes and text when using them inline ( &cred not &c red ) as the space will show. Use log.f(String) or log.format(String) to use inline colours. Override log . info ( 'some text' , [ '&a' , '&0' ]); // or log . info ( 'some text' , [ '&a' , '&!0' ]); Inline log . info ( log . format ( `this is normal info colour, &athis is light green &3,and it \\ 's easy to return to the normal colour` )); leeks.js short codes \u00b6 Foreground colours \u00b6 Code leeks.js &0 black &1 blue &2 green &3 cyan &4 red &5 magenta &6 yellow &7 blackBright &8 whiteBright &9 blueBright &a greenBright &b cyanBright &c redBright &d magentaBright &e yellowBright &f white Background colours \u00b6 Code leeks.js &!0 bgBlack &!1 bgBlue &!2 bgGreen &!3 bgCyan &!4 bgRed &!5 bgMagenta &!6 bgYellow &!7 bgBlackBright &!8 bgWhiteBright &!9 bgBlueBright &!a bgGreenBright &!b bgCyanBright &!c bgRedBright &!d bgMagentaBright &!e bgYellowBright &!f bgWhite Styles \u00b6 Code leeks.js &i inverse &j dim &k blink &l bold &m strikethrough &n underline &o italic &r reset","title":"Colours"},{"location":"colours/#colours","text":"To use colours (other than &codes) inline, you must import leeks.js (which you have already installed as it is one of the two dependencies). I recommend using &codes if you want to use inline colours, Example Require leeks.js to use inline colours other than &codes: const leeks = require ( 'leeks.js' ); BUT I recommend using &codes instead if you want to use inline colours. Using overrides: log . info ( text , [ foregroundColour ]); log . info ( text , [ foregroundColour , backgroundColour ]); log . info ( text , [ backgroundColour ]); where foregroundColour and backgroundColour are resolvable colours . Info If you give both a foreground and background colour, and the background colour given is the name or &code of a foreground colour, the background colour will be converted to an actual background colour. As RGB/HEX/8bit colours do not have specific foreground/background codes, if you wish to use an RGB/HEX/8bit colour for the background you must also give a foreground colour.","title":"Colours"},{"location":"colours/#types-of-colours","text":"","title":"Types of colours"},{"location":"colours/#leeksjs-colour-name","text":"A name of a colour (string or function). A full list of leeks.js colour names and style names can be found here . Override log . info ( 'some text' , [ 'blue' , 'black' ]); // or log . info ( 'some text' , [ 'blue' , 'bgBlack' ]); Inline log . info ( `this part is normal info colour ${ leeks . colours . red ( 'but this part is red' ) } , although this is also red :(` ); // better to use &codes for inline","title":"leeks.js / colour name"},{"location":"colours/#rgb","text":"A string of numbers separated by commas (with or without spaces). See leeks.js docs for inline usage. log . info ( 'some text' , [ '123, 123, 123' , '321, 321, 321' ]);","title":"RGB"},{"location":"colours/#hex","text":"A string with a HEX code ( with hashtag). See leeks.js docs for inline usage. log . info ( 'some text' , [ '#AABBCC' , '#123456' ]);","title":"HEX"},{"location":"colours/#8bit","text":"A number. You will get an error if you try to put the number in a string. See leeks.js docs for inline usage. log . info ( 'some text' , [ 16 , 1 ]);","title":"8bit"},{"location":"colours/#code","text":"A string containing an &fg or &!bg short code for a leeks.js colour. All short codes are listed below . Don't put a space between codes and text when using them inline ( &cred not &c red ) as the space will show. Use log.f(String) or log.format(String) to use inline colours. Override log . info ( 'some text' , [ '&a' , '&0' ]); // or log . info ( 'some text' , [ '&a' , '&!0' ]); Inline log . info ( log . format ( `this is normal info colour, &athis is light green &3,and it \\ 's easy to return to the normal colour` ));","title":"&amp;code"},{"location":"colours/#leeksjs-short-codes","text":"","title":"leeks.js short codes"},{"location":"colours/#foreground-colours","text":"Code leeks.js &0 black &1 blue &2 green &3 cyan &4 red &5 magenta &6 yellow &7 blackBright &8 whiteBright &9 blueBright &a greenBright &b cyanBright &c redBright &d magentaBright &e yellowBright &f white","title":"Foreground colours"},{"location":"colours/#background-colours","text":"Code leeks.js &!0 bgBlack &!1 bgBlue &!2 bgGreen &!3 bgCyan &!4 bgRed &!5 bgMagenta &!6 bgYellow &!7 bgBlackBright &!8 bgWhiteBright &!9 bgBlueBright &!a bgGreenBright &!b bgCyanBright &!c bgRedBright &!d bgMagentaBright &!e bgYellowBright &!f bgWhite","title":"Background colours"},{"location":"colours/#styles","text":"Code leeks.js &i inverse &j dim &k blink &l bold &m strikethrough &n underline &o italic &r reset","title":"Styles"},{"location":"getting-started/","text":"Getting started \u00b6 Installation \u00b6 Install with: NPM npm i leekslazylogger Yarn yarn add leekslazylogger And require it in your code: const Logger = require ( 'leekslazylogger' ); const log = new Logger ( options ); Warning Don't create another Logger instance in this process - use ChildLoggers . For options , see Customisation/Options . Please refer to Child loggers for information about using the logger in multiple files. Basic usage \u00b6 Each log type (default or custom) can be used like this: log . type ( text [, colours ]); // colour overrides are optional Examples log . info ( 'Hello world' ); log . console ( 'Ready.' , [ 'magentaBright' ]); log . console ( log . format ( 'Status: &aonline' )); A list of the default log types can be found here . Look at this page for information about custom log types. Colour overrides \u00b6 If you want to override the colours of a particular line you can do so like this: log . info ( 'useful information' , [ foreground , background ]); This will colour the entire line, including the timestamp & title. foreground and background should be a resolvable colour . Inline colours \u00b6 Use the log.format() function to colour text using &codes; log . console ( log . format ( '&athis is green &4and this is red' )); Tip You can use log.f() too.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"Install with: NPM npm i leekslazylogger Yarn yarn add leekslazylogger And require it in your code: const Logger = require ( 'leekslazylogger' ); const log = new Logger ( options ); Warning Don't create another Logger instance in this process - use ChildLoggers . For options , see Customisation/Options . Please refer to Child loggers for information about using the logger in multiple files.","title":"Installation"},{"location":"getting-started/#basic-usage","text":"Each log type (default or custom) can be used like this: log . type ( text [, colours ]); // colour overrides are optional Examples log . info ( 'Hello world' ); log . console ( 'Ready.' , [ 'magentaBright' ]); log . console ( log . format ( 'Status: &aonline' )); A list of the default log types can be found here . Look at this page for information about custom log types.","title":"Basic usage"},{"location":"getting-started/#colour-overrides","text":"If you want to override the colours of a particular line you can do so like this: log . info ( 'useful information' , [ foreground , background ]); This will colour the entire line, including the timestamp & title. foreground and background should be a resolvable colour .","title":"Colour overrides"},{"location":"getting-started/#inline-colours","text":"Use the log.format() function to colour text using &codes; log . console ( log . format ( '&athis is green &4and this is red' )); Tip You can use log.f() too.","title":"Inline colours"},{"location":"log-types/","text":"Default log types \u00b6 If you don't like one of the defaults, you can override it with a custom log type with the same name. If you want to override the colours on some but not all: log . info ( text , [ foregroundColour ]); log . info ( text , [ foregroundColour , backgroundColour ]); log . info ( text , [ backgroundColour ]); where foregroundColour and backgroundColour are resolvable colours . basic \u00b6 log . basic ( text ); // default: white // -> [00:00:00] text console \u00b6 log . console ( text ); // default: white // -> [00:00:00 | INFO] text info \u00b6 log . info ( text ); // default: cyan // -> [00:00:00 | INFO] text success \u00b6 log . success ( text ); // default: green // -> [00:00:00 | INFO] text debug \u00b6 log . debug ( text ); // default: blue // -> [00:00:00 | DEBUG] text notice \u00b6 log . notice ( text ); // default: black on bgYellow // -> [00:00:00 | NOTICE] text warn \u00b6 log . warn ( text ); // default: yellow // -> [00:00:00 | WARN] text error \u00b6 log . error ( text ); // default: red // -> [00:00:00 | ERROR] text","title":"Default log types"},{"location":"log-types/#default-log-types","text":"If you don't like one of the defaults, you can override it with a custom log type with the same name. If you want to override the colours on some but not all: log . info ( text , [ foregroundColour ]); log . info ( text , [ foregroundColour , backgroundColour ]); log . info ( text , [ backgroundColour ]); where foregroundColour and backgroundColour are resolvable colours .","title":"Default log types"},{"location":"log-types/#basic","text":"log . basic ( text ); // default: white // -> [00:00:00] text","title":"basic"},{"location":"log-types/#console","text":"log . console ( text ); // default: white // -> [00:00:00 | INFO] text","title":"console"},{"location":"log-types/#info","text":"log . info ( text ); // default: cyan // -> [00:00:00 | INFO] text","title":"info"},{"location":"log-types/#success","text":"log . success ( text ); // default: green // -> [00:00:00 | INFO] text","title":"success"},{"location":"log-types/#debug","text":"log . debug ( text ); // default: blue // -> [00:00:00 | DEBUG] text","title":"debug"},{"location":"log-types/#notice","text":"log . notice ( text ); // default: black on bgYellow // -> [00:00:00 | NOTICE] text","title":"notice"},{"location":"log-types/#warn","text":"log . warn ( text ); // default: yellow // -> [00:00:00 | WARN] text","title":"warn"},{"location":"log-types/#error","text":"log . error ( text ); // default: red // -> [00:00:00 | ERROR] text","title":"error"},{"location":"customisation/","text":"Customisation \u00b6 You can customise your logger by passing options when you create the new Logger instance, including creating custom log types and overriding defaults.","title":"Customisation"},{"location":"customisation/#customisation","text":"You can customise your logger by passing options when you create the new Logger instance, including creating custom log types and overriding defaults.","title":"Customisation"},{"location":"customisation/custom-types/","text":"Custom log types \u00b6 To create custom log types, pass a custom object of types with the options Example const log = new Loger ({ custom : { sql : { title : 'MySQL' , foreground : 'bluebright' , type : 'info' }, redis : { title : 'Redis' , foreground : 'redBright' , type : 'info' }, }, }); If you created a type called sql like this: custom : { sql : { title : 'MySQL' , foreground : 'bluebright' , type : 'info' }, }, You would use it like this: log . sql ( 'Something about the database' ); // -> [00:00:00 | MYSQL] Something about the database Format [TIMESTAMP | TITLE] [PREFIX] Text Options \u00b6 title \u00b6 A string that will show with the timestamp (it will be in uppercase) prefix \u00b6 Prefix string which goes after timestamp/title and before text (wrapped in []) foreground \u00b6 A resolvable foreground colour to colour the text. background \u00b6 A resolvable background colour to colour the background. type \u00b6 Changes the console function. Defaults to info","title":"Custom log types"},{"location":"customisation/custom-types/#custom-log-types","text":"To create custom log types, pass a custom object of types with the options Example const log = new Loger ({ custom : { sql : { title : 'MySQL' , foreground : 'bluebright' , type : 'info' }, redis : { title : 'Redis' , foreground : 'redBright' , type : 'info' }, }, }); If you created a type called sql like this: custom : { sql : { title : 'MySQL' , foreground : 'bluebright' , type : 'info' }, }, You would use it like this: log . sql ( 'Something about the database' ); // -> [00:00:00 | MYSQL] Something about the database Format [TIMESTAMP | TITLE] [PREFIX] Text","title":"Custom log types"},{"location":"customisation/custom-types/#options","text":"","title":"Options"},{"location":"customisation/custom-types/#title","text":"A string that will show with the timestamp (it will be in uppercase)","title":"title"},{"location":"customisation/custom-types/#prefix","text":"Prefix string which goes after timestamp/title and before text (wrapped in [])","title":"prefix"},{"location":"customisation/custom-types/#foreground","text":"A resolvable foreground colour to colour the text.","title":"foreground"},{"location":"customisation/custom-types/#background","text":"A resolvable background colour to colour the background.","title":"background"},{"location":"customisation/custom-types/#type","text":"Changes the console function. Defaults to info","title":"type"},{"location":"customisation/options/","text":"Options \u00b6 When you create your Logger instance you can pass an object containing options & custom log types: const Logger = require ( 'leekslazylogger' ); const log = new Logger ( options ); The object may take up many lines, so you could: // index const log = new Logger ( require ( './logger.js' )); // logger.js const { debug_mode } = require ( './config.js' ); module . exports = { name : 'Example' , custom : { /* custom / default overrides */ }, debug : debug_mode } Available options \u00b6 name \u00b6 Appears in the header of log files. Type: string Default: A leekslazylogger project Example name : 'Example project' , logToFile \u00b6 Should everything be logged into a file for future reference? Type: boolean Default: true Example logToFile : false , timestamp \u00b6 A valid timestamp format. Refer to dtf docs . Type: string Default: HH:mm:ss Example timestamp : 'DD/MM hh:mm AMPM' , maxAge \u00b6 How long should old log files be kept for (in days)? Type: integer Default: 7 Example maxAge : 30 , keepSilent \u00b6 Disable verbose from the logger? Quieter startup; errors and warnings will still be shown. Type: boolean Default: false Example keepSilent : true , debug \u00b6 Should debug messages be logged. If false, log.debug() is ignored. Type: boolean Default: false Example debug : config . debug , custom \u00b6 An object of custom log types. See Custom types . Type: object Example custom : { sql : { title : 'MySQL' , foreground : 'bluebright' , type : 'info' }, },","title":"Options"},{"location":"customisation/options/#options","text":"When you create your Logger instance you can pass an object containing options & custom log types: const Logger = require ( 'leekslazylogger' ); const log = new Logger ( options ); The object may take up many lines, so you could: // index const log = new Logger ( require ( './logger.js' )); // logger.js const { debug_mode } = require ( './config.js' ); module . exports = { name : 'Example' , custom : { /* custom / default overrides */ }, debug : debug_mode }","title":"Options"},{"location":"customisation/options/#available-options","text":"","title":"Available options"},{"location":"customisation/options/#name","text":"Appears in the header of log files. Type: string Default: A leekslazylogger project Example name : 'Example project' ,","title":"name"},{"location":"customisation/options/#logtofile","text":"Should everything be logged into a file for future reference? Type: boolean Default: true Example logToFile : false ,","title":"logToFile"},{"location":"customisation/options/#timestamp","text":"A valid timestamp format. Refer to dtf docs . Type: string Default: HH:mm:ss Example timestamp : 'DD/MM hh:mm AMPM' ,","title":"timestamp"},{"location":"customisation/options/#maxage","text":"How long should old log files be kept for (in days)? Type: integer Default: 7 Example maxAge : 30 ,","title":"maxAge"},{"location":"customisation/options/#keepsilent","text":"Disable verbose from the logger? Quieter startup; errors and warnings will still be shown. Type: boolean Default: false Example keepSilent : true ,","title":"keepSilent"},{"location":"customisation/options/#debug","text":"Should debug messages be logged. If false, log.debug() is ignored. Type: boolean Default: false Example debug : config . debug ,","title":"debug"},{"location":"customisation/options/#custom","text":"An object of custom log types. See Custom types . Type: object Example custom : { sql : { title : 'MySQL' , foreground : 'bluebright' , type : 'info' }, },","title":"custom"},{"location":"extensions/","text":"Extensions \u00b6 Extensions extend the Logger class to provide additional functionality. Current extensions: Express.js middleware ( GitHub ) Fastify plugin ( GitHub )","title":"Extensions"},{"location":"extensions/#extensions","text":"Extensions extend the Logger class to provide additional functionality. Current extensions: Express.js middleware ( GitHub ) Fastify plugin ( GitHub )","title":"Extensions"},{"location":"extensions/express/","text":"Express middleware \u00b6 Installation \u00b6 npm i leekslazylogger-express Usage \u00b6 // set up logger with options const ExpressLogger = require ( 'leekslazylogger-express' ); const log = new ExpressLogger ({ name : 'My express server' , // regular options such as custom types express : { format : '{method} &7{path}' // optional } }); // require express const express = require ( 'express' ); const app = express (); // use logger middleware app . use ( log . express ); ... // other middleware and router ... // start server app . listen ( 8080 ); The app.use(log.express); must be one of the first middleware, before the routing. Screenshot \u00b6 Options \u00b6 ExpressLogger takes the same options as normal , as well as an express object: const log = new ExpressLogger ({ express : { format : '' } }); Format \u00b6 The default format is: {method} {status-colour}{status} &7{path} {time-colour}({time}) The string can include colour codes . Placeholders \u00b6 The available placeholders for setting your own format are: {method} : GET/POST etc {protocol} : HTTP or HTTPS {route} : express route name (eg: /users/:id ) {path} : Full path (no query) {status-colour} / {status-color} : green/orange/blue/red colour code based on status code (to prefix status) {status} : status code (200, 301, 404 etc) {time-colour} / {time-color} : light green/yellow/red colour code based on time (to prefix time) {time} : time in ms for request to be completed","title":"Express middleware"},{"location":"extensions/express/#express-middleware","text":"","title":"Express middleware"},{"location":"extensions/express/#installation","text":"npm i leekslazylogger-express","title":"Installation"},{"location":"extensions/express/#usage","text":"// set up logger with options const ExpressLogger = require ( 'leekslazylogger-express' ); const log = new ExpressLogger ({ name : 'My express server' , // regular options such as custom types express : { format : '{method} &7{path}' // optional } }); // require express const express = require ( 'express' ); const app = express (); // use logger middleware app . use ( log . express ); ... // other middleware and router ... // start server app . listen ( 8080 ); The app.use(log.express); must be one of the first middleware, before the routing.","title":"Usage"},{"location":"extensions/express/#screenshot","text":"","title":"Screenshot"},{"location":"extensions/express/#options","text":"ExpressLogger takes the same options as normal , as well as an express object: const log = new ExpressLogger ({ express : { format : '' } });","title":"Options"},{"location":"extensions/express/#format","text":"The default format is: {method} {status-colour}{status} &7{path} {time-colour}({time}) The string can include colour codes .","title":"Format"},{"location":"extensions/express/#placeholders","text":"The available placeholders for setting your own format are: {method} : GET/POST etc {protocol} : HTTP or HTTPS {route} : express route name (eg: /users/:id ) {path} : Full path (no query) {status-colour} / {status-color} : green/orange/blue/red colour code based on status code (to prefix status) {status} : status code (200, 301, 404 etc) {time-colour} / {time-color} : light green/yellow/red colour code based on time (to prefix time) {time} : time in ms for request to be completed","title":"Placeholders"},{"location":"extensions/fastify/","text":"Fastify plugin \u00b6 This is very similar to the express extension and provides the same features but in a slightly different way. Rather than passing the options (for custom format) when creating your logger instance, you pass another options object when registering the plugin. Installation \u00b6 npm i leekslazylogger-fastify Usage \u00b6 // set up logger with options const FastifyLogger = require ( 'leekslazylogger-fastify' ); const log = new FastifyLogger ({ name : 'My fastify server' , // regular options such as custom types }); // require fastify const fastify = require ( 'fastify' )(); // use logger plugin fastify . register ( log . fastify ); // OR fastify . register ( log . fastify , { format : '{method} &7{path}' // optional }); ... // other plugins and router ... // start server fastify . listen ( 8080 ); Screenshot \u00b6 Options \u00b6 FastifyLogger takes the same options as normal : const log = new FastifyLogger ({ name : 'My fastify server' }); And the fastify plugin also takes options: fastify . register ( log . fastify , { format : '{method} &7{path}' }); Format \u00b6 The default format is: {method} {status-colour}{status} &7{path} {time-colour}({time}) The string can include colour codes . Placeholders \u00b6 The available placeholders for setting your own format are: {method} : GET/POST etc {protocol} : HTTP or HTTPS {route} : fastify route name (eg: /users/:id ) {path} : Full path (no query) {status-colour} / {status-color} : green/orange/blue/red colour code based on status code (to prefix status) {status} : status code (200, 301, 404 etc) {time-colour} / {time-color} : light green/yellow/red colour code based on time (to prefix time) {time} : time in ms for request to be completed","title":"Fastify plugin"},{"location":"extensions/fastify/#fastify-plugin","text":"This is very similar to the express extension and provides the same features but in a slightly different way. Rather than passing the options (for custom format) when creating your logger instance, you pass another options object when registering the plugin.","title":"Fastify plugin"},{"location":"extensions/fastify/#installation","text":"npm i leekslazylogger-fastify","title":"Installation"},{"location":"extensions/fastify/#usage","text":"// set up logger with options const FastifyLogger = require ( 'leekslazylogger-fastify' ); const log = new FastifyLogger ({ name : 'My fastify server' , // regular options such as custom types }); // require fastify const fastify = require ( 'fastify' )(); // use logger plugin fastify . register ( log . fastify ); // OR fastify . register ( log . fastify , { format : '{method} &7{path}' // optional }); ... // other plugins and router ... // start server fastify . listen ( 8080 );","title":"Usage"},{"location":"extensions/fastify/#screenshot","text":"","title":"Screenshot"},{"location":"extensions/fastify/#options","text":"FastifyLogger takes the same options as normal : const log = new FastifyLogger ({ name : 'My fastify server' }); And the fastify plugin also takes options: fastify . register ( log . fastify , { format : '{method} &7{path}' });","title":"Options"},{"location":"extensions/fastify/#format","text":"The default format is: {method} {status-colour}{status} &7{path} {time-colour}({time}) The string can include colour codes .","title":"Format"},{"location":"extensions/fastify/#placeholders","text":"The available placeholders for setting your own format are: {method} : GET/POST etc {protocol} : HTTP or HTTPS {route} : fastify route name (eg: /users/:id ) {path} : Full path (no query) {status-colour} / {status-color} : green/orange/blue/red colour code based on status code (to prefix status) {status} : status code (200, 301, 404 etc) {time-colour} / {time-color} : light green/yellow/red colour code based on time (to prefix time) {time} : time in ms for request to be completed","title":"Placeholders"}]}