{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 About \u00b6 leekslazylogger is an easy-to-use and lightweight Node.JS logger with file support, colours, and timestamps. Features \u00b6 Highly customisable 8 default log types and ability to add custom types Standard/RGB/HEX/8Bit colours UK and US spellings Short colour codes for fast colour (Minecraft-like, \"&cred text\") Debug mode (ignores debug messages unless told not to) Custom timestamp and date format for file names Automatically cleans-up old logs (optional) Strips colour if it's not supported in the environment Cross-platform Getting started \u00b6 For installation and usage instructions/examples, see Getting Started Support \u00b6 If you can't find what you're looking for here, ask for help in #support on Discord . Donate \u00b6 Buy me a coffee if you want :)","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#about","text":"leekslazylogger is an easy-to-use and lightweight Node.JS logger with file support, colours, and timestamps.","title":"About"},{"location":"#features","text":"Highly customisable 8 default log types and ability to add custom types Standard/RGB/HEX/8Bit colours UK and US spellings Short colour codes for fast colour (Minecraft-like, \"&cred text\") Debug mode (ignores debug messages unless told not to) Custom timestamp and date format for file names Automatically cleans-up old logs (optional) Strips colour if it's not supported in the environment Cross-platform","title":"Features"},{"location":"#getting-started","text":"For installation and usage instructions/examples, see Getting Started","title":"Getting started"},{"location":"#support","text":"If you can't find what you're looking for here, ask for help in #support on Discord .","title":"Support"},{"location":"#donate","text":"Buy me a coffee if you want :)","title":"Donate"},{"location":"child-loggers/","text":"Child loggers \u00b6 In your index you should have required leekslazylogger and created a new Logger instance as shown on the Getting started page. Don't create another Logger instance in this process - use ChildLoggers. To use the Logger in another file (eg. utils.js ) you could use a ChildLogger, or you could pass log . Option 1 \u00b6 Using a ChildLogger Pass the log object to the log.multi() function once, then create ChildLoggers in your other files. // index.js log . multi ( log ); // another file (eg. utils.js) const ChildLogger = require ( 'leekslazylogger' ). ChildLogger ; const log = new ChildLogger (); // no options, inherits from main Option 2 \u00b6 Passing the log object Simple, just use the same log object in every file. // index.js const utils = require ( './utils.js' ); utils . myFunction ( log , ...);","title":"Child loggers"},{"location":"child-loggers/#child-loggers","text":"In your index you should have required leekslazylogger and created a new Logger instance as shown on the Getting started page. Don't create another Logger instance in this process - use ChildLoggers. To use the Logger in another file (eg. utils.js ) you could use a ChildLogger, or you could pass log .","title":"Child loggers"},{"location":"child-loggers/#option-1","text":"Using a ChildLogger Pass the log object to the log.multi() function once, then create ChildLoggers in your other files. // index.js log . multi ( log ); // another file (eg. utils.js) const ChildLogger = require ( 'leekslazylogger' ). ChildLogger ; const log = new ChildLogger (); // no options, inherits from main","title":"Option 1"},{"location":"child-loggers/#option-2","text":"Passing the log object Simple, just use the same log object in every file. // index.js const utils = require ( './utils.js' ); utils . myFunction ( log , ...);","title":"Option 2"},{"location":"colours/","text":"Colours \u00b6 To use colours (other than &codes) inline, you must import leeks.js (which you have already installed as it is one of the two dependencies). I recommend using &codes if you want to use inline colours, Example Require leeks.js to use inline colours other than &codes: const leeks = require ( 'leeks.js' ); BUT I recommend using &codes if you want to use inline colours, so this isn't necessary. Using overrides: log . info ( text , [ foregroundColour ]); log . info ( text , [ foregroundColour , backgroundColour ]); log . info ( text , [ backgroundColour ]); where foregroundColour and backgroundColour are resolvable colours . Info If you give both a foreground and background colour, and the background colour given is the name or &code of a foreground colour, the background colour will be converted to an actual background colour. As RGB/HEX/8bit colours do not have specific foreground/background codes, if you wish to use an RGB/HEX/8bit colour for the background you must also give a foreground colour. Types of colours \u00b6 leeks.js / colour name \u00b6 A name of a colour (string or function). A full list of leeks.js colour names and style names can be found here . Override log . info ( 'some text' , [ 'blue' , 'black' ]); // or log . info ( 'some text' , [ 'blue' , 'bgBlack' ]); Inline log . info ( `this part is normal info colour ${ leeks . colours . red ( 'but this part is red' ) } , although this is also red :(` ); // better to use &codes for inline RGB \u00b6 A string of numbers separated by commas (with or without spaces). log . info ( 'some text' , [ '123, 123, 123' , '321, 321, 321' ]); HEX \u00b6 A string with a HEX code ( with hashtag). log . info ( 'some text' , [ '#AABBCC' , '#123456' ]); 8bit \u00b6 A number. You will get an error if you try to put the number in a string. log . info ( 'some text' , [ 16 , 1 ]); &code \u00b6 A string containing an &fg or &!bg short code for a leeks.js colour. All short codes are listed below . Don't put a space between codes and text when using them inline ( &cred not &c red ) as the space will show. Override log . info ( 'some text' , [ '&a' , '&0' ]); // or log . info ( 'some text' , [ '&a' , '&!0' ]); Inline log . info ( 'this is normal info colour, &athis is light green &3,and it\\'s easy to return to the normal colour' ); Tip You can disable inline &codes by setting the translateCodes option to false . The logger will ignore &codes. leeks.js short codes \u00b6 Foreground colours \u00b6 Code leeks.js &0 black &1 blue &2 green &3 cyan &4 red &5 magenta &6 yellow &7 blackBright &8 whiteBright &9 cyanBright &a greenBright &b blueBright &c redBright &d magentaBright &e yellowBright &f white Background colours \u00b6 Code leeks.js &!0 bgBlack &!1 bgBlue &!2 bgGreen &!3 bgCyan &!4 bgRed &!5 bgMagenta &!6 bgYellow &!7 bgBlackBright &!8 bgWhiteBright &!9 bgCyanBright &!a bgGreenBright &!b bgBlueBright &!c bgRedBright &!d bgMagentaBright &!e bgYellowBright &!f bgWhite Styles \u00b6 Code leeks.js &i inverse &j dim &k blink &l bold &m strikethrough &n underline &o italic &r reset","title":"Colours"},{"location":"colours/#colours","text":"To use colours (other than &codes) inline, you must import leeks.js (which you have already installed as it is one of the two dependencies). I recommend using &codes if you want to use inline colours, Example Require leeks.js to use inline colours other than &codes: const leeks = require ( 'leeks.js' ); BUT I recommend using &codes if you want to use inline colours, so this isn't necessary. Using overrides: log . info ( text , [ foregroundColour ]); log . info ( text , [ foregroundColour , backgroundColour ]); log . info ( text , [ backgroundColour ]); where foregroundColour and backgroundColour are resolvable colours . Info If you give both a foreground and background colour, and the background colour given is the name or &code of a foreground colour, the background colour will be converted to an actual background colour. As RGB/HEX/8bit colours do not have specific foreground/background codes, if you wish to use an RGB/HEX/8bit colour for the background you must also give a foreground colour.","title":"Colours"},{"location":"colours/#types-of-colours","text":"","title":"Types of colours"},{"location":"colours/#leeksjs-colour-name","text":"A name of a colour (string or function). A full list of leeks.js colour names and style names can be found here . Override log . info ( 'some text' , [ 'blue' , 'black' ]); // or log . info ( 'some text' , [ 'blue' , 'bgBlack' ]); Inline log . info ( `this part is normal info colour ${ leeks . colours . red ( 'but this part is red' ) } , although this is also red :(` ); // better to use &codes for inline","title":"leeks.js / colour name"},{"location":"colours/#rgb","text":"A string of numbers separated by commas (with or without spaces). log . info ( 'some text' , [ '123, 123, 123' , '321, 321, 321' ]);","title":"RGB"},{"location":"colours/#hex","text":"A string with a HEX code ( with hashtag). log . info ( 'some text' , [ '#AABBCC' , '#123456' ]);","title":"HEX"},{"location":"colours/#8bit","text":"A number. You will get an error if you try to put the number in a string. log . info ( 'some text' , [ 16 , 1 ]);","title":"8bit"},{"location":"colours/#code","text":"A string containing an &fg or &!bg short code for a leeks.js colour. All short codes are listed below . Don't put a space between codes and text when using them inline ( &cred not &c red ) as the space will show. Override log . info ( 'some text' , [ '&a' , '&0' ]); // or log . info ( 'some text' , [ '&a' , '&!0' ]); Inline log . info ( 'this is normal info colour, &athis is light green &3,and it\\'s easy to return to the normal colour' ); Tip You can disable inline &codes by setting the translateCodes option to false . The logger will ignore &codes.","title":"&amp;code"},{"location":"colours/#leeksjs-short-codes","text":"","title":"leeks.js short codes"},{"location":"colours/#foreground-colours","text":"Code leeks.js &0 black &1 blue &2 green &3 cyan &4 red &5 magenta &6 yellow &7 blackBright &8 whiteBright &9 cyanBright &a greenBright &b blueBright &c redBright &d magentaBright &e yellowBright &f white","title":"Foreground colours"},{"location":"colours/#background-colours","text":"Code leeks.js &!0 bgBlack &!1 bgBlue &!2 bgGreen &!3 bgCyan &!4 bgRed &!5 bgMagenta &!6 bgYellow &!7 bgBlackBright &!8 bgWhiteBright &!9 bgCyanBright &!a bgGreenBright &!b bgBlueBright &!c bgRedBright &!d bgMagentaBright &!e bgYellowBright &!f bgWhite","title":"Background colours"},{"location":"colours/#styles","text":"Code leeks.js &i inverse &j dim &k blink &l bold &m strikethrough &n underline &o italic &r reset","title":"Styles"},{"location":"getting-started/","text":"Getting started \u00b6 Installation \u00b6 Install with: NPM npm i leekslazylogger Yarn yarn add leekslazylogger And require it in your code: const Logger = require ( 'leekslazylogger' ); const log = new Logger ({ options }); Warning Don't create another Logger instance in this process - use ChildLoggers . For options , see Customisation . Please refer to Child loggers for information about using the logger in multiple files. Basic usage \u00b6 Each log type (default or custom) can be used like this: log . type ( text , [ colours ]); // colour overrides are optional Example log . info ( 'Hello world' ); A list of the default log types can be found here . Look at this page for information about custom log types. Colour overrides \u00b6 If you want to override the colours of a particular line you can do so like this: log . info ( 'useful information' , [ foreground , background ]); This will colour the entire line, including the timestamp & title. foreground and background should be a resolvable colour .","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"Install with: NPM npm i leekslazylogger Yarn yarn add leekslazylogger And require it in your code: const Logger = require ( 'leekslazylogger' ); const log = new Logger ({ options }); Warning Don't create another Logger instance in this process - use ChildLoggers . For options , see Customisation . Please refer to Child loggers for information about using the logger in multiple files.","title":"Installation"},{"location":"getting-started/#basic-usage","text":"Each log type (default or custom) can be used like this: log . type ( text , [ colours ]); // colour overrides are optional Example log . info ( 'Hello world' ); A list of the default log types can be found here . Look at this page for information about custom log types.","title":"Basic usage"},{"location":"getting-started/#colour-overrides","text":"If you want to override the colours of a particular line you can do so like this: log . info ( 'useful information' , [ foreground , background ]); This will colour the entire line, including the timestamp & title. foreground and background should be a resolvable colour .","title":"Colour overrides"},{"location":"log-types/","text":"Default log types \u00b6 If you don't like one of the defaults, you can override it with a custom log type with the same name. If you want to override the colours on some but not all: log . info ( text , [ foregroundColour ]); log . info ( text , [ foregroundColour , backgroundColour ]); log . info ( text , [ backgroundColour ]); where foregroundColour and backgroundColour are resolvable colours . basic \u00b6 log . basic ( text ); // default: white // -> [00:00:00] text console \u00b6 log . console ( text ); // default: white // -> [00:00:00 | INFO] text info \u00b6 log . info ( text ); // default: cyan // -> [00:00:00 | INFO] text success \u00b6 log . success ( text ); // default: green // -> [00:00:00 | INFO] text debug \u00b6 log . debug ( text ); // default: blue // -> [00:00:00 | DEBUG] text notice \u00b6 log . notice ( text ); // default: black on bgYellow // -> [00:00:00 | NOTICE] text warn \u00b6 log . warn ( text ); // default: yellow // -> [00:00:00 | WARN] text error \u00b6 log . error ( text ); // default: red // -> [00:00:00 | ERROR] text","title":"Default log types"},{"location":"log-types/#default-log-types","text":"If you don't like one of the defaults, you can override it with a custom log type with the same name. If you want to override the colours on some but not all: log . info ( text , [ foregroundColour ]); log . info ( text , [ foregroundColour , backgroundColour ]); log . info ( text , [ backgroundColour ]); where foregroundColour and backgroundColour are resolvable colours .","title":"Default log types"},{"location":"log-types/#basic","text":"log . basic ( text ); // default: white // -> [00:00:00] text","title":"basic"},{"location":"log-types/#console","text":"log . console ( text ); // default: white // -> [00:00:00 | INFO] text","title":"console"},{"location":"log-types/#info","text":"log . info ( text ); // default: cyan // -> [00:00:00 | INFO] text","title":"info"},{"location":"log-types/#success","text":"log . success ( text ); // default: green // -> [00:00:00 | INFO] text","title":"success"},{"location":"log-types/#debug","text":"log . debug ( text ); // default: blue // -> [00:00:00 | DEBUG] text","title":"debug"},{"location":"log-types/#notice","text":"log . notice ( text ); // default: black on bgYellow // -> [00:00:00 | NOTICE] text","title":"notice"},{"location":"log-types/#warn","text":"log . warn ( text ); // default: yellow // -> [00:00:00 | WARN] text","title":"warn"},{"location":"log-types/#error","text":"log . error ( text ); // default: red // -> [00:00:00 | ERROR] text","title":"error"},{"location":"customisation/","text":"Customisation \u00b6 You can customise your logger by passing options when you create the new Logger instance, including creating custom log types and overriding defaults. You can also override the colours per-line.","title":"Customisation"},{"location":"customisation/#customisation","text":"You can customise your logger by passing options when you create the new Logger instance, including creating custom log types and overriding defaults. You can also override the colours per-line.","title":"Customisation"},{"location":"customisation/custom-types/","text":"Custom log types \u00b6 const yes = \"no\" ; const function = () => { ... // bonjour // fancy } Note Hey! This is a notice. Yes? No Summary mm Tldr learn to read Info information Tip hi Help no Warning I warned you...","title":"Custom log types"},{"location":"customisation/custom-types/#custom-log-types","text":"const yes = \"no\" ; const function = () => { ... // bonjour // fancy } Note Hey! This is a notice. Yes? No Summary mm Tldr learn to read Info information Tip hi Help no Warning I warned you...","title":"Custom log types"},{"location":"customisation/options/","text":"Options \u00b6","title":"Options"},{"location":"customisation/options/#options","text":"","title":"Options"}]}