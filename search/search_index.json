{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 About \u00b6 leekslazylogger is an easy-to-use and lightweight Node.JS logger with file support, colours, and timestamps. Features \u00b6 Highly customisable 8 default log types and ability to add custom types Standard/RGB/HEX/8Bit colours UK and US spellings Short colour codes for fast colour (Minecraft-like, \"&cred text\") Debug mode (ignores debug messages unless told not to) Custom timestamp and date format for file names Automatically cleans-up old logs (optional) Strips colour if it's not supported in the environment Cross-platform Getting started \u00b6 For installation and usage instructions/examples, see Getting Started Support \u00b6 If you can't find what you're looking for here, ask for help in #support on Discord . Donate \u00b6 Buy me a coffee if you want :)","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#about","text":"leekslazylogger is an easy-to-use and lightweight Node.JS logger with file support, colours, and timestamps.","title":"About"},{"location":"#features","text":"Highly customisable 8 default log types and ability to add custom types Standard/RGB/HEX/8Bit colours UK and US spellings Short colour codes for fast colour (Minecraft-like, \"&cred text\") Debug mode (ignores debug messages unless told not to) Custom timestamp and date format for file names Automatically cleans-up old logs (optional) Strips colour if it's not supported in the environment Cross-platform","title":"Features"},{"location":"#getting-started","text":"For installation and usage instructions/examples, see Getting Started","title":"Getting started"},{"location":"#support","text":"If you can't find what you're looking for here, ask for help in #support on Discord .","title":"Support"},{"location":"#donate","text":"Buy me a coffee if you want :)","title":"Donate"},{"location":"child-loggers/","text":"Child loggers \u00b6 In your index you should have required leekslazylogger and created a new Logger instance as shown on the Getting started page. Don't create another Logger instance in this process - use ChildLoggers. To use the Logger in another file (eg. utils.js ) you could use a ChildLogger, or you could pass log . Option 1 \u00b6 Using a ChildLogger Pass the log object to the log.multi() function once, then create ChildLoggers in your other files. // index.js log . multi ( log ); // another file (eg. utils.js) const ChildLogger = require ( 'leekslazylogger' ). ChildLogger ; const log = new ChildLogger (); // no options, inherits from main Option 2 \u00b6 Passing the log object Simple, just use the same log object in every file. // index.js const utils = require ( './utils.js' ); utils . myFunction ( log , ...);","title":"Child loggers"},{"location":"child-loggers/#child-loggers","text":"In your index you should have required leekslazylogger and created a new Logger instance as shown on the Getting started page. Don't create another Logger instance in this process - use ChildLoggers. To use the Logger in another file (eg. utils.js ) you could use a ChildLogger, or you could pass log .","title":"Child loggers"},{"location":"child-loggers/#option-1","text":"Using a ChildLogger Pass the log object to the log.multi() function once, then create ChildLoggers in your other files. // index.js log . multi ( log ); // another file (eg. utils.js) const ChildLogger = require ( 'leekslazylogger' ). ChildLogger ; const log = new ChildLogger (); // no options, inherits from main","title":"Option 1"},{"location":"child-loggers/#option-2","text":"Passing the log object Simple, just use the same log object in every file. // index.js const utils = require ( './utils.js' ); utils . myFunction ( log , ...);","title":"Option 2"},{"location":"getting-started/","text":"Getting started \u00b6 Installation \u00b6 Install with: NPM npm i leekslazylogger Yarn yarn add leekslazylogger And require it in your code: const Logger = require ( 'leekslazylogger' ); const log = new Logger ({ options }); Warning Don't create another Logger instance in this process - use ChildLoggers . For options , see Customisation . Please refer to Child loggers for information about using the logger in multiple files. Basic usage \u00b6 Each log type (default or custom) can be used like this: log . type ( text , [ colours ]); // colour overrides are optional Example log . info ( 'Hello world' ); A list of the default log types can be found here . Look at this page for information about custom log types.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"Install with: NPM npm i leekslazylogger Yarn yarn add leekslazylogger And require it in your code: const Logger = require ( 'leekslazylogger' ); const log = new Logger ({ options }); Warning Don't create another Logger instance in this process - use ChildLoggers . For options , see Customisation . Please refer to Child loggers for information about using the logger in multiple files.","title":"Installation"},{"location":"getting-started/#basic-usage","text":"Each log type (default or custom) can be used like this: log . type ( text , [ colours ]); // colour overrides are optional Example log . info ( 'Hello world' ); A list of the default log types can be found here . Look at this page for information about custom log types.","title":"Basic usage"},{"location":"log-types/","text":"Default log types \u00b6","title":"Default log types"},{"location":"log-types/#default-log-types","text":"","title":"Default log types"},{"location":"customisation/","text":"Customisation \u00b6","title":"Customisation"},{"location":"customisation/#customisation","text":"","title":"Customisation"},{"location":"customisation/custom-types/","text":"Custom log types \u00b6 const yes = \"no\" ; const function = () => { ... // bonjour // fancy } Note Hey! This is a notice. Yes? No Summary mm Tldr learn to read Info information Tip hi Help no Warning I warned you...","title":"Custom log types"},{"location":"customisation/custom-types/#custom-log-types","text":"const yes = \"no\" ; const function = () => { ... // bonjour // fancy } Note Hey! This is a notice. Yes? No Summary mm Tldr learn to read Info information Tip hi Help no Warning I warned you...","title":"Custom log types"},{"location":"customisation/options/","text":"Options \u00b6","title":"Options"},{"location":"customisation/options/#options","text":"","title":"Options"}]}